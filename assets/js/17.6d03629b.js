(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{399:function(a,s,t){"use strict";t.r(s);var n=t(42),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_13-1-instancias-de-modelo-de-funcao"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-instancias-de-modelo-de-funcao"}},[a._v("#")]),a._v(" 13.1 - Instâncias de Modelo de Função")]),a._v(" "),t("p",[a._v("Vamos dar uma olhada rápida por funções de modelo e como implementá-las em C++.")]),a._v(" "),t("p",[a._v("Acontece que o C ++ não compila diretamente a função de modelo. Em vez disso, no momento da compilação, quando o compilador encontra uma chamada para uma função de modelo, ele replica a função de modelo e substitui os parâmetros de tipo de modelo por tipos reais. A função com tipos reais é chamada de instância de modelo de função.")]),a._v(" "),t("p",[a._v("Vamos dar uma olhada em um exemplo desse processo. Primeiro, temos uma função de modelo:")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("template")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typename")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Declaração do template")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Argumentos")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ternário retornando o maior valor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("Ao compilar seu programa, o compilador encontra uma chamada para a função de modelo:")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("div",{staticClass:"highlight-lines"},[t("div",{staticClass:"highlighted"},[a._v(" ")]),t("br")]),t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// calls max(int, int)")]),a._v("\n")])])]),t("p",[a._v("O compilador chama max(int, int) e replica o modelo da função e cria a instância do modelo max (int, int):")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("Ele irá identificar o tipo de retorno e dos parâmetros para criar a função")]),a._v(" "),t("h1",{attrs:{id:"operadores-chamadas-de-funcao-e-modelos-de-funcao"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#operadores-chamadas-de-funcao-e-modelos-de-funcao"}},[a._v("#")]),a._v(" Operadores, chamadas de função e modelos de função")]),a._v(" "),t("p",[a._v("As funções de modelo funcionarão com os tipos internos (por exemplo, char, int, double, etc ...) e classes, com uma ressalva. Quando o compilador compila a instância do modelo, ele a compila exatamente como uma função normal. Em uma função normal, todos os operadores ou chamadas de função que você usa com seus tipos devem ser definidos ou você receberá um erro do compilador. Da mesma forma, quaisquer operadores ou chamadas de função na função de modelo devem ser definidos para quaisquer tipos para os quais o modelo de função é instanciado. Vamos dar uma olhada nisso com mais detalhes.")]),a._v(" "),t("p",[a._v("Olhe o seguinte exemplo:")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<string>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[a._v("#"),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<memory>")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("template")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typename")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Declaração do template")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("maior")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" T"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Argumentos")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ternário retornando o maior valor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Funcionario")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    std"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("string m_nome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" m_idade"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Funcionario")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("std"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("string nNome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" nIdade"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("m_nome "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" nNome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("m_idade "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" nIdade"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  Funcionario "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("funcionario1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Funcionario")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Joao"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  Funcionario "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("funcionario2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Funcionario")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Jose"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  Funcionario "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("maior_idade "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("maior")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("funcionario1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" funcionario2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  std"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" maior_idade"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("m_idade"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" funcionario1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" funcionario2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("Esse exemplo funciona, por se tratar de struct's, MAIS CUIDADO! Se for utilizar classes,você irá ter que fazer overload de operador para o template entender a comparação.")]),a._v(" "),t("p",[a._v("Na seção de Orientação a Objetos, iremos deixar isso bem claro.")])])}),[],!1,null,null,null);s.default=e.exports}}]);